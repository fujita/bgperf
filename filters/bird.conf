# take from https://bgpfilterguide.nlnog.net

# bogon ASNs

define BOGON_ASNS = [
  0,                      # RFC 7607
  23456,                  # RFC 4893 AS_TRANS
  64496..64511,           # RFC 5398 and documentation/example ASNs
  64512..65534,           # RFC 6996 Private ASNs
  65535,                  # RFC 7300 Last 16 bit ASN
  65536..65551,           # RFC 5398 and documentation/example ASNs
  65552..131071,          # RFC IANA reserved ASNs
  4200000000..4294967294, # RFC 6996 Private ASNs
  4294967295 ];           # RFC 7300 Last 32 bit ASN

function reject_bogon_asns()
int set bogon_asns;
{
  bogon_asns = BOGON_ASNS;

  if ( bgp_path ~ bogon_asns ) then {
    reject;
  }
}

# bogon prefixes
define BOGON_PREFIXES = [
  0.0.0.0/8+,         # RFC 1122 'this' network
  10.0.0.0/8+,        # RFC 1918 private space
  100.64.0.0/10+,     # RFC 6598 Carrier grade nat space
  127.0.0.0/8+,       # RFC 1122 localhost
  169.254.0.0/16+,    # RFC 3927 link local
  172.16.0.0/12+,     # RFC 1918 private space
  192.0.2.0/24+,      # RFC 5737 TEST-NET-1
  192.88.99.0/24+,    # RFC 7526 6to4 anycast relay
  192.168.0.0/16+,    # RFC 1918 private space
  198.18.0.0/15+,     # RFC 2544 benchmarking
  198.51.100.0/24+,   # RFC 5737 TEST-NET-2
  203.0.113.0/24+,    # RFC 5737 TEST-NET-3
  224.0.0.0/4+,       # multicast
  240.0.0.0/4+ ];     # reserved

function reject_bogon_prefixes()
prefix set bogon_prefixes;
{
  bogon_prefixes = BOGON_PREFIXES;

  if (net ~ bogon_prefixes) then {
    reject;
  }
}


# small prefixes
function reject_small_prefixes()
{
  if (net.len > 24) then {
    print "Reject: Too small prefix: ", net, " ", bgp_path;
    reject;
  }
}

# long as paths
function reject_long_aspaths()
{
    if ( bgp_path.len > 100 ) then {
        print "Reject: Too long AS path: ", net, " ", bgp_path;
        reject;
    }
}

# known transit AS

define TRANSIT_ASNS = [ 174,                  # Cogent
                        701,                  # UUNET
                        1299,                 # Telia
                        2914,                 # NTT Ltd.
                        3257,                 # GTT Backbone
                        3320,                 # Deutsche Telekom AG (DTAG)
                        3356,                 # Level3
                        3491,                 # PCCW
                        4134,                 # Chinanet
                        5511,                 # Orange opentransit
                        6453,                 # Tata Communications
                        6461,                 # Zayo Bandwidth
                        6762,                 # Seabone / Telecom Italia
                        6830,                 # Liberty Global
                        7018 ];               # AT&T
function reject_transit_paths()
int set transit_asns;
{
        transit_asns = TRANSIT_ASNS;
        if (bgp_path ~ transit_asns) then {
                #print "Reject: Transit ASNs found on IXP: ", net, " ", bgp_path;
                reject;
        }
}


filter transit {
  #reject_invalids(); #rpki not implemented yet
  reject_bogon_asns();
  reject_bogon_prefixes();
  reject_long_aspaths();
  reject_small_prefixes();
  
  accept;
}

filter ixp {
  # reject_invalids();#rpki not implemented yet
  reject_bogon_asns();
  reject_bogon_prefixes();
  reject_long_aspaths();
  reject_transit_paths();
  reject_small_prefixes();

  accept;
}

